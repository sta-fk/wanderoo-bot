<?php

namespace App\Service;

use App\DTO\Request\TelegramUpdate;
use App\Enum\States;
use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

class TelegramService
{
    private string $apiUrl;
    private HttpClientInterface $client;

    public function __construct(
        ParameterBagInterface $params,
        HttpClientInterface $client
    ) {
        $this->apiUrl = sprintf("%s%s", $params->get('telegram_bot_api_url'), $params->get('telegram_bot_token'));
        $this->client = $client;
    }

    public function handleUpdate(TelegramUpdate $update): void
    {
        if ($update->message?->text === States::Start->value) {
            $chatId = $update->message->chat->id;
            $this->sendWelcomeMessage($chatId);
        }

        if ($update->callbackQuery) {
            $chatId = $update->callbackQuery->message->chat->id;
            $data = $update->callbackQuery->data;

            if ($data === 'start_yes') {
                $this->sendMarkdownMessage($chatId, '–°—É–ø–µ—Ä! –ü–æ—á–Ω—ñ–º–æ ‚ú®');
            }
        }
    }

    public function sendWelcomeMessage(int $chatId): void
    {
        $text = <<<TEXT
–ü—Ä–∏–≤—ñ—Ç! –Ø ‚úàÔ∏è Wanderoo ‚Äî –±–æ—Ç, —â–æ –¥–æ–ø–æ–º–æ–∂–µ —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Ç–≤–æ—é –º–∞–Ω–¥—Ä—ñ–≤–∫—É.

–Ø –ø–æ—Å—Ç–∞–≤–ª—é –∫—ñ–ª—å–∫–∞ –ø—Ä–æ—Å—Ç–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å —ñ –∑–≥–µ–Ω–µ—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ç—Ä–µ–≤–µ–ª-–ø–ª–∞–Ω: —â–æ –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å, –∫—É–¥–∏ —Å—Ö–æ–¥–∏—Ç–∏, —â–æ —Å–∫—É—à—Ç—É–≤–∞—Ç–∏ üçú

–ü–æ—á–Ω–µ–º–æ?
TEXT;

        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => 'üß≥ –¢–∞–∫, —Ö–æ—á—É –ø–ª–∞–Ω!', 'callback_data' => 'start_yes'],
                    ['text' => '‚ùå –ù—ñ, –ø—Ä–æ—Å—Ç–æ –¥–∏–≤–ª—é—Å—å', 'callback_data' => 'start_no'],
                ]
            ]
        ];

        $this->sendMarkdownMessage($chatId, $text, $keyboard);
    }

    public function sendMarkdownMessage(int $chatId, string $text, ?array $replyMarkup = null): void
    {
        $payload = [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'Markdown',
        ];

        if ($replyMarkup) {
            $payload['reply_markup'] = json_encode($replyMarkup);
        }

        $this->client->request('POST', "{$this->apiUrl}/sendMessage", [
            'json' => $payload
        ]);
    }
}
